Description: >
    nghiahv1 / Udacity 2023

Parameters:

    EnvironmentName:
        Description: Webserver
        Type: String
    S3Policies:
        Description: "The AWS Managed Policy for the EC2 Instance Role"
        Type: CommaDelimitedList
    InstanceType:
        Type: String
        Description: "EC2 instance type. For the second project required 2vCPU and 4GiB of Memory, so t3.medium is the best fits for this spec."
        AllowedValues:
            - t3a.medium
            - t3.medium
            - t2.medium
    KeyPair:
        Type: AWS::SSM::Parameter::Value<AWS::EC2::KeyPair::KeyName>
        Description: "AWS key pair in us-east-1, stored in SSM Parameter Store"
    ImageId:
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Description: "AWS AMI in us-east-1, stored in SSM Parameter Store"
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html          
      # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: !Ref ImageId
      # ToDo: Change the key-pair name, as applicable to you. 
      KeyName: !Ref KeyPair
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  WebAppRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Description: "The IAM role of second project that allow S3 read only and SSM Managed Instance Core"
            ManagedPolicyArns: !Ref S3Policies
            Tags:
                -   Key: "Name"
                    Value:
                        Fn::Join:
                            - ""
                            -   - !Ref EnvironmentName
                                - "-web-server-iam-role-"
                                -   Ref: "AWS::Region"

  WebServerInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
          Path: "/"
          Roles:
              -   Ref: "WebAppRole"

Outputs:
    WebServerLoadBalancerURL:
        Description: "Load balancer URL "
        Value:
            Fn::Sub:
                - "http://${load_balancer_url}"
                -   load_balancer_url:
                        Fn::GetAtt: "WebServerLoadBalancer.DNSName"
        Export:
            Name:
                Fn::Join:
                    - ""
                    -   - !Ref EnvironmentName
                        - "-load_balancer_url"
                        - Ref: "AWS::Region"

    WebServerInstanceProfile:
        Description: "The Instance profile that allow S3 read only and SSM Managed Instance Core"
        Value:
            Ref: "WebServerInstanceProfile"
        Export:
            Name:
                Fn::Join:
                    - ""
                    -   - !Ref EnvironmentName
                        - "-WebServerInstanceProfile"

    WebServerSecurityGroupId:
        Description: "The web server security group id"
        Value:
            Ref: "WebServerSecurityGroup"
        Export:
            Name:
                Fn::Join:
                    - ""
                    -   - !Ref EnvironmentName
                        - "-web-server-sg-"
                        - Ref: "AWS::Region"

    LoadBalancerSecurityGroupId:
        Description: "The load balancer security group id"
        Value:
            Ref: "LoadBalancerSecurityGroup"
        Export:
            Name:
                Fn::Join:
                    - ""
                    -   - !Ref EnvironmentName
                        - "-load-balancer-sg-"
                        - Ref: "AWS::Region"
